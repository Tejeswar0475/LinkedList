/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedListProgram;

import org.junit.Test;
import static org.junit.Assert.*;

public class MyLinkedListTest {
	
	@Test
	public void givenThreeNumbersShouldPassedLinkedListTest()
	{
		MyNode<Integer> myFirstNode=new MyNode<>(56);
		MyNode<Integer> mySecondNode=new MyNode<>(30);
		MyNode<Integer> myThirdNode=new MyNode<>(70);
		myFirstNode.setNext(mySecondNode);
		mySecondNode.setNext(myThirdNode);
		boolean result=myFirstNode.getNext().equals(mySecondNode) && 
					   mySecondNode.getNext().equals(myThirdNode);
		
		assertTrue(result);
	}
   	
	@Test
	public void givenThreeNumbersShouldPassedLinkedListTestToTop()
	{
		MyNode<Integer> myFirstNode=new MyNode<>(70);
		MyNode<Integer> mySecondNode=new MyNode<>(30);
		MyNode<Integer> myThirdNode=new MyNode<>(56);
		MyLinkedList myLinkedList=new MyLinkedList();
		myLinkedList.add(myFirstNode);
		myLinkedList.add(mySecondNode);
		myLinkedList.add(myThirdNode);
		myLinkedList.printMyNodes();
		boolean result=myLinkedList.head.equals(myThirdNode) &&
					   myLinkedList.head.getNext().equals(mySecondNode) &&
					   myLinkedList.tail.equals(myFirstNode);
		assertTrue(result);
	}

	@Test
    public void givenThreeNumbersWhenAppendedShouldAddedToLast() {
        MyNode<Integer> myFirstNode=new MyNode<>(56);
        MyNode<Integer> mySecondNode=new MyNode<>(30);
        MyNode<Integer> myThirdNode=new MyNode<>(70);
        MyLinkedList myLinkedList=new MyLinkedList();
        myLinkedList.add(myFirstNode);
        myLinkedList.append(mySecondNode);
        myLinkedList.append(myThirdNode);
        myLinkedList.printMyNodes();
        boolean result = myLinkedList.head.equals(myFirstNode) &&
                         myLinkedList.head.getNext().equals(mySecondNode) &&
                         myLinkedList.tail.equals(myThirdNode);
        assertTrue(result);
	}
	
	@Test
    public void givenThreeNumbersWhenInserting()
	{
        MyNode<Integer> myFirstNode=new MyNode<>(56);
        MyNode<Integer> mySecondNode=new MyNode<>(30);
        MyNode<Integer> myThirdNode=new MyNode<>(70);
        MyLinkedList myLinkedList=new MyLinkedList();
        myLinkedList.append(myFirstNode);
        myLinkedList.append(myThirdNode);
        myLinkedList.insert(myFirstNode,mySecondNode);
        myLinkedList.printMyNodes();
        boolean result = myLinkedList.head.equals(myFirstNode) &&
                		 myLinkedList.head.getNext().equals(mySecondNode) &&
                		 myLinkedList.tail.equals(myThirdNode);
        assertTrue(result);
    } 

	@Test
    public void givenThreeNumbersDeleteShouldPassed()
	{
        MyNode<Integer> myFirstNode = new MyNode<>(56);
        MyNode<Integer> mySecondNode = new MyNode<>(30);
        MyNode<Integer> myThirdNode = new MyNode<>(70);
        MyLinkedList myLinkedList = new MyLinkedList();
        myLinkedList.append(myFirstNode);
        myLinkedList.append(mySecondNode);
        myLinkedList.append(myThirdNode);
        myLinkedList.pop();
        myLinkedList.printMyNodes();
        boolean result = myLinkedList.head.equals(mySecondNode) &&
        				 myLinkedList.tail.equals(myThirdNode);
        assertTrue(result);
    }
	


@Test
    public void givenThreeNumbersDeleteLastShouldPassed()
	{
        MyNode<Integer> myFirstNode = new MyNode<>(56);
        MyNode<Integer> mySecondNode = new MyNode<>(30);
        MyNode<Integer> myThirdNode = new MyNode<>(70);
        MyLinkedList myLinkedList = new MyLinkedList();
        myLinkedList.append(myFirstNode);
        myLinkedList.append(mySecondNode);
        myLinkedList.append(myThirdNode);
        myLinkedList.popLast();
        myLinkedList.printMyNodes();
        boolean result = myLinkedList.head.equals(myFirstNode) &&
        				 myLinkedList.tail.equals(mySecondNode);
        assertTrue(result);
    }	
}

